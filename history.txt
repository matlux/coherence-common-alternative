----------------------------------------------------------------------------------------------------
Coherence-Common Project History
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Version 2.1.2: January 25, 2012: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Resolved issue where calling ServiceReference.isReferencing(...) on a service that is shutting 
	down would cause a RuntimeException. (thanks to JK for identifying and providing a solution)
	
*)	Resolved issue where ExtensibleEnvironment.instantiateAny(...) would not include all of the
	(overriding) parameters defined by ClassInfo, thus preventing some wrapper-based cache 
	implementations from working. (thanks to JK for identifying and providing a solution)
	
*)	Resolved issue where the AbstractApplicationScheme.setEnvironmentVariables(...) would not 
	actually do anything. (thanks to JK for identifying and providing a solution)
	
----------------------------------------------------------------------------------------------------
Version 2.1.1: November 8, 2011: Brian Oliver
----------------------------------------------------------------------------------------------------

*) 	Added a new com.oracle.coherence.common.network.Constants package to define what LOCAL_HOST is.

*)	Modified *.builders and *.runtime packages to use the network constants definition of LOCAL_HOST
	This resolves a potential problem running unit tests bound to 127.0.0.1 across different platforms
	on Coherence 3.7.1+, especially OSX Lion.
	
*)	Resolves the issue where strongly typed primitive-based parameters declared in <init-param>s aren't
	seen as compatible values for <class-scheme> constructors and/or static methods.
	
*)	Introduced LiveObject annotation.  It has the same semantics as the SupportsEventProcessing annotation. 

*)	Resolved issue where SupportsEventProcessing and LiveObject annotations where not discovered on
	abstract or super classes.
	
*)	Resolved issue where EventProcessorFor annotations where not discovered on abstract of super classes.

*) 	Refactored and optimized the DelegatingBackingMapListener to cache reflected methods.

----------------------------------------------------------------------------------------------------
Version 2.1.0: September 8, 2011: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Added type parameter to VarArgsParameterizedBuilder to improve type checking.

*)	Added new constructor to VarArgsParameterizedBuilder for explicitly specified classes.

*)	Made ScopedParameterProvider and SystemPropertyParameterProviders serializable and portable.

*)	Introduced EnvironmentClassLoaderExpression to support representing the environment classloader
	as an Expression (thus being serializable).
	
*)	Added isSerializable() to Expression interface and Parameter, Constant, Value and MacroParameter classes
	to allow runtime filtering of non-serializable Expressions. 
	
*)	Modified the element:introduce-cache-config attribute to take a comma separated list of URIs 
	of cache configurations (instead of a single cache configuration URI).

*) 	Introduced NamedCacheSerializerBuilder to permit passing the serializer of a named cache across 
	process boundaries (used primarily by Event Distribution)
	
*)	Introduced com.oracle.coherence.common.runtime package to allow runtime creation/management/destruction
	of Java Applications, Application Groups and Clusters.  
	
*)	Deprecated the com.oracle.coherence.common.applications package.  
	Developers should use com.oracle.coherence.common.runtime instead.

----------------------------------------------------------------------------------------------------
Version 2.0.0: April 18, 2011: Christer Fahlgren, Charlie Helin, Brian Oliver
----------------------------------------------------------------------------------------------------

*) 	Upgraded to use Coherence 3.7

*)	Updated all .xml files to use appropriate XSDs for validation.

*)	BREAKING CHANGE: The <introduce:config> element and namespace has been removed due to incompatibility with 
	Coherence 3.7 XSD validation.  Instead you should use the new XmlElementProcessingNamespace, which
	supports introduce-cache-config and other (way better) XmlElement pre-processing.
	
*)	BREAKING CHANGE: Refactored and Renamed com.oracle.coherence.schemes.*Scheme to 
	com.oracle.coherence.common.builders.*Builder.  This is to align the Incubator conceptually
	with a future version of Coherence.

*)	Introduced support for <class-scheme> parsing to construct a ParameterizedBuilder.  This is to enable 
	deprecation (and removal) of the instance and value namespaces.
	
	NOTE: Unlike the traditional Coherence <class-scheme> implementation, the <class-scheme> 
	implementation provided by Coherence-Common (which overrides the Coherence implementation)   
	supports nested-class-scheme declarations.

*)	BREAKING CHANGE: Renamed ParameterScope to ParameterProvider make the functionality explicit.
	
*)	Added the ability for ParameterProviders to return a Map<String, ?> to make them compatible with map-based
	properties required by other Java libraries.

*) 	BREAKING CHANGE: Refactored Parameter implementation to be based on Expressions instead of Values.
	Parameters are now optionally named and optionally typed Expressions instead of Values.
	
*)	BREAKING CHANGE: Expressions are no longer generics.  Instead they return a Value instance, which like
	a variant, is polymorphic and supports type coercion/checking.

*)	Introduced the notion of a Constant Expression called Constant that may be used for literals
	when Expressions are required.
	
*)	Introduced support for using {cache-ref} macro parameters.
	
*)	Added logging to warn when users are overriding configurations, typically from other cache configuration files

*)  Resolved CacheMapping.isForCache(...) matching defect (out-by-one). Added new unit tests.

*) 	Resolved CacheMappingRegistry.addCacheMapping(...) defect where new registrations of an existing
	CacheMapping would override and cause configuration loss previous information.  Information is
	now merged.  Added new unit tests.
	
*)	Added support for the <defaults> element in the Coherence Namespace

*)  Introduced support for partition aware keys - see com.oracle.coherence.common.partition

*)  Introduced support for backingmap-event-processor through the ServerNameSpaceContentHandler
	
*) 	Resolved defect in AbstractBackingMapEntryEvent.EntryEvent initialization.  It could incorrectly
	initialize a value with a key.

*)  Resolved compatibility issue with the LogExceptionScheduledThreadPoolExecutor and 
    LogExceptionThreadPoolExecutor and the JDK.

*)	Resolved missing POF declarations for Long and IntegerBasedIdentifiers

*)	Resolved defect that throws UnsupportedOperationException when attempting to ensureService for a LocalCache.
	
*)	BREAKING CHANGE: Renamed the Decorations feature in configuration to be Enrichments
	to avoid confusion with Coherence Binary Decorations.
	
*)	Refactored out EnrichmentSupport into a separate inferface and implementation from CacheMapping to
	permit the enrichment of other classes	
	
*)	Introduced EnrichmentSupport for the ConfigurationContext interface (and default implementation) so that
	strongly typed enrichments can be added to the ConfigurationContext while processing configuration.  This
	allows "parent" contexts to decorate and provide information to "child"/"nested" contexts.

*)	Added new com.oracle.coherence.common.applications package to support describing and running application
	processes, like Coherence.

*)	Introduced the concept of ClusterMetaInfo to identify clusters (this simplifies things in Push Replication)
		
*)	Introduced the concept of StringTransformers that allow the use of regular expressions to match and
	transform strings from one form to another.  This is very useful for matching and transforming Cache Names.
	
*)	Refactored and deprecated Configurator methods into the ConfigurationContext interface and 
	DefaultConfigurationContext implementation.  This removes yet another static class from the code base and allows
	for simplified mocking/unit testing.	

*)	Introduced the Jndi Namespace <jndi:resource> that may be used to lookup resources via the configured jndi context.
	
*)	Enhanced MacroParameterExpression to support multiple macros in a single expression.
	
*)	Introduced the DelegatingPartitionListener class to delegate Partition Events to the environment EventDispatcher

*)	Introduced the PartitionAssignedEvent to support the Coherence 3.6 partition assignment event.

*) 	SEMANTIC CHANGE: The DelegatingBackingMapListener now dispatches all events on entries to the environment 
	EventDispatcher.  In the past only those entries that supported EventProcessor or EventProcessorFactory were
	dispatched.
	
*)	Introduced the com.oracle.coherence.common.serialization package to support annotation-driven serialization.

*)	BREAKING CHANGE: Refactored Environment to allow named resource registration and access.  Dropped support for
	ResourceResolvers,
	
*)	Migrated the Resource Supervision implementation from Push Replication into Commons (now called ResourceProviders
	and SupervisedResourceProviders).  Implementation is in com.oracle.coherence.common.resourcing

*)	Introduced the notion of a Deferred Resource Provider.
	
*)	Introduced SimpleBinaryEntry to simplify unit testing of classes that require BinaryEntry(s).

*)	Added support for using XSDs/xsi declarations together with non-class-based URI schemes.

*) 	BREAKING CHANGE: Removed the pof-based cache configurations.  It now uses the system-wide configuration.

----------------------------------------------------------------------------------------------------
Version 1.7.1: August 4, 2010: Christer Fahlgren, Brian Oliver
----------------------------------------------------------------------------------------------------

*)  Fixed reporting of exceptions from LogExceptionThreadPoolExecutor

*)  Introduced ExecutorListener and ObservableExecutor interfaces 
    
*)	BREAKING CHANGE: Introduced support for Macro Parameters.  This includes changing the 
 	signature of ClassScheme.realize to allow passing of ParameterScopes.
 	
*)	Introduced CacheMapping and CacheMappingRegistry (managed by the Environment) to support looking
	up CacheMappings defined in Cache Configuration Files.  This includes support for parsing
	<init-params> from Cache Configuration Files to aid in the construction of ParameterScopes.
	
*)	Introduced the com.oracle.coherence.util.Value class.  A Variant-like type to support representing
	untyped values at runtime, together with a mechanism to dynamically Coerce values into required types.	
    
----------------------------------------------------------------------------------------------------
Version 1.7.0: June 22, 2010: Brian Oliver, Christer Fahlgren
----------------------------------------------------------------------------------------------------
*)  Introduced an EC2AddressProvider that makes it easier to start Coherence clusters in an Amazon
    EC2 environment.
    
*)	BREAKING CHANGE: Enforced Environments to be type-safe.  This included removing the following
    methods;

	public Object getResource(String name);
	public boolean registerResource(String name, Object object);

*)	BREAKING CHANGE: The EnvironmentNamespaceContentHandler now expects to be provided a 
    fully-qualified-interface/class-name as a parameter, not just any String.  
    (ie: part of enforcing type-safety it now requires the class-name).

*)	BREAKING CHANGE: It's no longer possible to remove/unregister registered resources.  
    The following methods are no longer supported.
	
	public void unregisterResource(String name);
	public <R> void unregisterResource(Class<R> clazz);

*)	Introduced the ResourceResolver interface for Environments.  This allows Environments to be 
	"enhanced" with "resolvers" so that parameterized requests for explicitly typed to resources 
	may be resolved/produced/created.  Consequently introduced the method;
	
	public <R> void registerResourceResolver(Class<R> clazz, ResourceResolver<R> resource);
	
	and refactored;
	
	public <R> R getResource(Class<R> clazz);
	
	to be;
	
	public <R> R getResource(Class<R> clazz, Object... params);

*)  Migrated unit tests to use Mockito instead of EasyMock.

*)  Added new processElement*(...) methods to ConfigurationContext to aid in the processing of
    child xml elements.
    
*)  Introduced the concept of a Scheme to represent declarative configuration for resources, 
    that may later be realized when required.  As part of this introduced the ClassScheme interface.
    
*)  Introduced the ability to use custom namespace elements with in Coherence <class-schemes>
    so long as the said namespace element handlers return a ClassScheme.  This now allows support for
    things like a "Spring" namespace within <class-schemes>.
    
*)	Allowed the specification and use of "system-property"s in Cache Configuration elements
	(aka: command-line overrides) that use custom-namespaces.
	
	eg: <value:integer system-property="my-value">10</value:integer>
	
*)	BREAKING CHANGE: The ConfigurationContext.process(XmlElement) method is now called 
	processElement(XmlElement).
	
*)	Introduced the ConfigurationContext.processDocument(XmlElement) method that pre-processes the
	provided XmlElement to resolve uses of "system-property"s. 
	
*)	Introduced the concept of a ConfigurationException as a standard way to capture configuration errors and provide
	advice for resolving them.	
	
*)	BREAKING CHANGE: Refactored the AttributeContentHandler.onAttribute(...) method to now include
	the QualifiedName of the attribute instead of just a String.  Added support for ConfigurationExceptions.	

*)	BREAKING CHANGE: Refactored the ElementContentHandler.onElement(...) method to now include
	the QualifiedName of the element.  Added support for ConfigurationExceptions.	

*)	Introduced ConfigurationContext.processDocument(String), .processDocumentAt(URI) and .processDocumentAt(String)
	methods to simplify processing of entire xml documents.

*)	Now catches the potential for recursively loading Coherence Cache Configuration files due to 
	eager use of CacheFactory calls in Namespace Content Handlers.  An exception is now thrown together
	with a full log of the stack trace.
    
*)	Introduced NamedCacheLifecycleEvents that are raised to indicate life-cycles of a NamedCache
	storage creation/release with in a process.
	
*)	BREAKING CHANGE: Refactored the SimpleEventDispatcher (the default implementation of the
	EventDispatcher) so that calls to the dispatch(...) method use the calling thread to dispatch 
	and process events.  This means that event dispatch and processing is now synchronous and not 
	asynchronous as it was previously.  
	
	To have event processing occur asynchronously, the EventProcessor should be wrapped in a 
	AsynchronousEventProcessorAdapter or inherit its implementation from the AsynchronousEventProcessor class. 
	
	NOTE: For backwards compatibility, the DependencyTracker implementation remains asynchronous.
	
*)	Introduced a Configurator that can automatically set the properties of an object (usually a Scheme) annotated with
    @Configurable and @Property from an Xml Element.
    
*)	BackingMapEntryEvents now cache their deserialized values.  This leads to increased performance and less garbage
	when the same entry is used repeatedly.

----------------------------------------------------------------------------------------------------
Version 1.6.1: 12th March 2010: Brian Oliver, Bob Hanckel
----------------------------------------------------------------------------------------------------

*)  Javadoc now includes the com.oracle.coherence.environment.* package (missing from last release)

*) 	BREAKING CHANGE: NamespaceContentHandler methods are now passed the "prefix" of the namespace.

*)  BREAKING CHANGE: AttributeContentHandler onAttribute method now includes the name of the attribute.

*)  Introduced AbstractNamespaceContentHandler to dramatically simplify the creation of 
 	NamespaceContentHandlers that have multiple ElementContentHandlers and/or AttributeContentHandlers

*)	Resolved internalStoreAll defect in BinaryReadWriteBackingMap

----------------------------------------------------------------------------------------------------
Version 1.6.0: 25th January 2010: Brian Oliver, Christer Fahlgren and Noah Arliss
----------------------------------------------------------------------------------------------------

*)  Introduced helper methods for reflection based construction of objects

*)  Introduced Handler mapping java.util.logging to the Coherence logging facility

*)  Introduced ObjectProxyFactory allowing for creation of proxies for Objects 
    residing in a remote NamedCache.
    
*)  Updated to depend on Coherence 3.5.3+

*)  Deprecated the AdvancedConfigurableCacheFactory.  Now recommended to use
    the new ExtensibleEnvironment (which is now the default ConfigurableCacheFactory for the
    Incubator)
    
*)  Introduced the concept of an Environment to hold runtime resources and remove
    the need for statics in the Incubator projects.  The ExtensibleEnvironment is the default 
    implementation of an Environment (and a ConfigurableCacheFactory).  It is backwards compatible
    with the AdvancedConfigurableCacheFactory, including the use of "<introduce-cache-config>".
    
*)  Introduced the concept of namespaces in the cache-config files for Coherence.
    This includes introducing the ability to define new NamespaceContentHandlers for customizing
    the startup of Coherence.
    
*)  Introduced the concept of an EventDispatcher resource (accessible via an
    Environment).  This allows registration of EventProcessors and asynchronous dispatch of Events 
    to said EventDispatchers (for safe non-Coherence-thread asynchronous handling)
    
*)  Introduced a canoncial Event model (based on Seismic Research Project) together
    with the concept of EventProcessors, EventProcessorFactorys and the use of annotations to 
    annotate methods that support Event processing.
    
*)  Introduced the concept of a LifecycleAwareEntry (and deprecated LifecycleCacheEntry)
    to support asynchronous event processing using the new Event model and EventDispatcher.
    
*)  Introduced new DelegatingBackingMapListener implementation that dispatches
    backing map events using the new canoncial Event model using an EventDispatcher.  The implementation
    is also aware of EventProcessorFactorys and classes annotated to support Event processing.
    
*)  Introduced the new AbstractDelegatingPartitionListener to support asynchronous
    processing of new partition events (using the new canoncial Event model).
    
*)  Introduced a new InvokeMethodProcessor for the purposes of simplifying calling
    an arbitrary method on a cache entry value.

*)  Migrated from TestNG to Junit

----------------------------------------------------------------------------------------------------
Version 1.5.0: 21st October 2009: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Introduced the concept of a Tristate to represent TRUE, FALSE and UNDEFINED values
	
*)	Updated to depend on Coherence 3.5.2 (and Coherence 3.4)

----------------------------------------------------------------------------------------------------
Version 1.4.0: 21st July 2009: Brian Oliver and Christer Fahlgren
----------------------------------------------------------------------------------------------------

*)	Added FilteringIterator to provide filtering (with Coherence Filters) of standard Iterators.

*)	Introduced the com.oracle.coherence.common.sequencegenerators package and 
	clustered implementation to allow generation of sequence numbers in other packages 
	(this was refactored and removed from the Command Pattern implementation)
	
*)	Introduced name-spaces for common caches (like the sequence generators cache)

*)  Hardening Ranges implementations to prevent NPEs (in weird use cases) and corrected numerous 
    defects (producing incorrect ranges using union and intersection).
	
*)	Introduced automated testng script running during the ant build process

----------------------------------------------------------------------------------------------------
Version 1.3.0: 30th March 2009: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Migrated to use Apache Ivy for dependency management and publishing artifacts 
	(introduced ivy.xml, removed dependencies.info).  
	
	Apart from now using standardized repositories and the potential to integrate
	with Maven, all Coherence Incubator projects should now (almost) have the same build.xml files!

*)	Added the Range.size() method support to determine how many values are in a Range

*)	Made the AbstractMultiplexingBackingMapListener MapEvent deserialization lazy 
	(achieved by introducing an internal LazyMapEvent).  This improves performance of some
	uses of BackingMapListener implementations, but as much as 15% (in lab tests)

*)	Migrated build.xml file to use Apache Ivy 2.0

*)	Added a getString() to the StringBasedIdentifier

*)	Added a getUUID() method to the UUIDBasedIdentifier

*)	Introduced support for Tuples in the com.oracle.coherence.common.tuples package.
	They are handy for returning type-safe multiple values from methods / entry processors

*)	Introduced support for Leases in the com.oracle.coherence.common.leasing package. At the moment
	these are predominantly used by the Messaging layer, but will be handy elsewhere.

*)	Introduced the MultiplexingBackingMapListener interface.  Additionally refactored the Cause
	enumeration out of the AbstractMultiplexingBackingMapListener implementation.
	
*)	Introduced the DelegatingMultiplexingBackingMapListener implementation to delegate BackingMapListener 
	events to objects in the cache that support the MultiplexingBackingMapListener interface.
	This allows an object to be notified of events happening to itself.

*)	Introduced the concept of a ContiguousRange based on the previous Range implementation.

*)	Introduced an implementation of a SparseRange

----------------------------------------------------------------------------------------------------
Version 1.2.0: 10th November 2008: Brian Oliver and Simon Bisson
----------------------------------------------------------------------------------------------------

*)	Removed the MemberAware interface as it was a). inefficient in it's implementation in large
	clusters AND b). returned incorrect values after n+1 failovers / recovery cycles.  It was
	only useful for simple demonstrations.
	
*)	Refactored the AbstractMultiplexingBackingMapListener to remove dependency on MemberAware
	(this included changing the Cause enumeration to only provide support for a PartitionManagement 
	cause, thus removing the need for LoadBalancing and Recovery causes).
	
	This significantly improves performance on large clusters when a member fails or partition
	load-balancing occurs.

*)	Modified the ThreadFactories.newThreadFactory(...) method to support naming created threads
	and specification of a ThreadGroup.
	
	This helps when creating and calling threads on a Coherence Thread (prevents the <warning>s
	about "calling a CacheFactory on a Service Thread".
	
*)	Now correctly displays Ticket.NONE when using Ticket.toString

*)	Added TicketBook.iterate(n) to support iterating over the first "n" Tickets in a TicketBook
	(without removing them)

*)	Added TicketBook.consume(n) to support removing (ie: consuming) the first "n" Tickets from
	a TicketBook (without having create an iterator over them).
	
*)	Added a logging package to simplify using Coherence-based Logging.

*)	Added deploy target to the build.xml (to simplify deployment to a repository)
	(thanks Ashish)

----------------------------------------------------------------------------------------------------
Version 1.1.1: 14th October 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Introduced the AdvancedConfigurableCacheFactory to simplify use of Incubator projects
	(like those that require, include and override other cache configurations from other projects)
	
	This introduces the ability to use <introduce-cache-config file="..." /> element that may be
	used as an immediate child of the <cache-config> element in Coherence Cache Config files.

----------------------------------------------------------------------------------------------------
Version 1.1.0: 27th September 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	WARNING: Changed the semantics of the Range class so that it may now represent empty ranges 
	starting at a specified value.  This change means the constructor Range(long) now constructs 
	an empty range commencing at the specified value, instead of a singleton range commencing at the 
	specified value.

*)	Added com.oracle.coherence.common.ranges.Ranges class to help construct Ranges.

*)	WARNING: Moved the Ticket class into the com.oracle.coherence.common.ticketing package.  
	We're going to be doing more stuff with Tickets in the future, so we should put all of this together.
	
*)	Added the TicketBook class to com.oracle.coherence.common.ticketing.  This is used to 
	efficiently represent ranges of Tickets from the same "issuer".
	
*)	Added the TicketAggregator class to com.oracle.coherence.common.ticketing.  This is useful for
	aggregating (in parallel) Tickets into TicketBooks.

*)	Added support for Coherence 3.4 and Portable Object Format.  Remains backwards compatible with
	Coherence 3.3.x
	
	coherence-common-pof-config.xml contains the required POF type definitions (for Java)

*)	Improved generated javadoc so that it now directly links to the standard 
	Oracle Coherence 3.4 online documentation.

----------------------------------------------------------------------------------------------------
Version 1.0.0: 12th August 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Created to capture common classes used within the patterns (and other) Coherence-required
	projects, like the coherence-commandpattern, coherence-functorpattern, coherence-replication etc

*) 	Initial commit to SVN repository
